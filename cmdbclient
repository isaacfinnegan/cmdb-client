#!/usr/bin/perl
use CMDB::Client;
use Getopt::Long qw(GetOptionsFromString GetOptions);

my ($query,$hl,$fields,$help,$noheader,$nofieldname,$cluster_id,$customer_id,$tag,$role,$status);

my ($list,$host);
my $fieldsep="\n";

my $results=GetOptions(
	"query=s" => \$query,
	"customerbycluster=s" => \$cluster_id,
	"customerbylicense=s" => \$customer_id,
	"fields=s" => \$fields,
	"json" => \$json,
	"hl" => \$hl,
	"noheader" => \$noheader,
	"nofieldname" => \$nofieldname,
	"help" => \$help,
	"fieldsep=s" => \$fieldsep,
	"list" => \$list,
	"host=s" => \$host,
	"tag=s" => \$tag,
	"role=s" => \$role,
	"status=s" => \$status
	);

if($ENV{CMDBCLIENT_OPTS})
{
	my $results=GetOptionsFromString( $ENV{CMDBCLIENT_OPTS}, 
	"query=s" => \$query,
	"customerbycluster=s" => \$cluster_id,
	"customerbylicense=s" => \$customer_id,
	"fields=s" => \$fields,
	"json" => \$json,
	"hl" => \$hl,
	"noheader" => \$noheader,
	"nofieldname" => \$nofieldname,
	"help" => \$help,
	"fieldsep=s" => \$fieldsep,
	"tag=s" => \$tag,
	"role=s" => \$role,
	"status=s" => \$status
	);
}
	
if($hl)
{
	$nofieldname=1;
	$noheader=1;
	$fields='fqdn';
}

if($help || (!$ARGV[0] && !$query && !$cluster_id && !$host && !$list && !$role && !$tag && !$status))
{
	print <<EOF;
usage:  cmdbclient [hostname|ip address] [--query=] [--fields=]
	where
		--query = string containg json encoded query (supercedes hostname param)
		--hl = hostlist output (shortcut for noheader,nofieldname,fields=fqdn)
		--fields = comma sep fieldlist
		--noheader   does not display header for each result
		--nofieldname   just returns values without field label
		--json 		print results in JSON format
		--fieldsep	field separater, defaults to newline
		--role query for role  (roles field query)
		--tag query for tag (tags field query)
		--status query for status
		--help   prints this message

		PROTIP: these options can also be specified in the CMDBCLIENT_OPTS environment variable
EOF
	exit;
}
if($cluster_id || $customer_id)
{
	my $cust=$cluster_id ? &getCustomer({cluster_id=>$cluster_id}) : &getCustomer({customer_id=>$customer_id});
	my @fieldloop= $fields ? ('sid','customer_id','customer_name') : ('sid','customer_id','customer_name');
	foreach my $f (@fieldloop)
	{
		print "$f : " unless $nofieldname;
		print "$$cust{$f}\n";
	}
	exit;
}
my $key = 'fqdn';

if ( $ARGV[0] =~ m/^(\d\d?\d?).(\d\d?\d?).(\d\d?\d?).(\d{1,})/ )
{
	$key = 'ip_address';
}

my $q=[];

if($ARGV[0])
{
  push(@$q,"$key=*$ARGV[0]*");	
}
if($tag)
{
	push(@$q, "tags=$tag");
}
if($role)
{
	push(@$q, "roles=$role");
}
if($status)
{
	if($status=~m/!/)
	{
		$status=~s/!//g;
		push(@$q, "status!=$status");
	}
	else
	{
		push(@$q, "status=$status");
	}
}

if($query)
{
 $q=eat_json($query)
}

#ansible compat
# just looking up host, then exit
if($host)
{
	my $host_info=&getRecs({"fqdn" => $host });
	if(scalar(@$var))
	{
		print make_json($host_info->[0]);
	}
	exit;
}

#print STDERR "QUERY: " . make_json($q);

my $var=&getRecs( 'system',$q );

#ansible output formatting
# gets all hosts, and sticks query in 'cmdbquery' ansible group
if($list)
{
	# get all host info for inventory
	$all_systems=&getRecs('system',{"fqdn" => "*"});
	my $res={};
	$res->{'allhosts'}->{'hosts'} = [];
	foreach my $system (@$all_systems)
	{
		push(@{$res->{'allhosts'}->{'hosts'}}, $system->{'fqdn'});
		$res->{'_meta'}->{'hostvars'}->{$system->{'fqdn'}}=$system;
		if(length($system->{'roles'}) > 2)
		{
			foreach my $role (split(',',$system->{'roles'}))
			{
				if(!$res->{$role})
				{
					$res->{$role}=[];
				}
				push(@{$res->{$role}},$system->{'fqdn'});
			}
		}
	}
	foreach my $system (@$var)
	{
		push(@{$res->{'cmdbquery'}}, $system->{'fqdn'});
	}
	print STDERR "doing svc lookup\n";
	my $svcs_lkup=&getRecs('services');
	my %svcs=map { $_->{'name'}=>$_ } @{$svcs_lkup};
	$res->{'allhosts'}->{'vars'}->{'services'}=\%svcs;
	print make_json($res);
	exit;
}

if($json)
{
	print make_json($var);
	exit;
}

print "### Found " . scalar(@$var) . " systems.\n" unless $noheader;
foreach my $s (@$var)
{
	print "### System: $$s{'fqdn'} ###\n" unless $noheader;
	
	my @fieldloop= $fields ? split(',',$fields) : keys(%$s);
	if ($json)
	{
		print make_json({ map { ($_, $s->{$_}) } @fieldloop }), "\n";
	}
	elsif (!$nofieldname)
	{
		printf "%s : %s\n", $_, $s->{$_} for (@fieldloop);
	}
	else
	{
		printf "%s\n", join($fieldsep, map { $s->{$_} } @fieldloop);
	}
}
